// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: fullnode/proto/fullnode.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FullNodeClient is the client API for FullNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FullNodeClient interface {
	GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*GetBlocksResponse, error)
	AppendBlocks(ctx context.Context, in *AppendBlocksRequest, opts ...grpc.CallOption) (*AppendBlocksResponse, error)
	GetLastBlock(ctx context.Context, in *GetLastBlockRequest, opts ...grpc.CallOption) (*GetLastBlockResponse, error)
}

type fullNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewFullNodeClient(cc grpc.ClientConnInterface) FullNodeClient {
	return &fullNodeClient{cc}
}

func (c *fullNodeClient) GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*GetBlocksResponse, error) {
	out := new(GetBlocksResponse)
	err := c.cc.Invoke(ctx, "/fullnode.FullNode/GetBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fullNodeClient) AppendBlocks(ctx context.Context, in *AppendBlocksRequest, opts ...grpc.CallOption) (*AppendBlocksResponse, error) {
	out := new(AppendBlocksResponse)
	err := c.cc.Invoke(ctx, "/fullnode.FullNode/AppendBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fullNodeClient) GetLastBlock(ctx context.Context, in *GetLastBlockRequest, opts ...grpc.CallOption) (*GetLastBlockResponse, error) {
	out := new(GetLastBlockResponse)
	err := c.cc.Invoke(ctx, "/fullnode.FullNode/GetLastBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FullNodeServer is the server API for FullNode service.
// All implementations must embed UnimplementedFullNodeServer
// for forward compatibility
type FullNodeServer interface {
	GetBlocks(context.Context, *GetBlocksRequest) (*GetBlocksResponse, error)
	AppendBlocks(context.Context, *AppendBlocksRequest) (*AppendBlocksResponse, error)
	GetLastBlock(context.Context, *GetLastBlockRequest) (*GetLastBlockResponse, error)
	mustEmbedUnimplementedFullNodeServer()
}

// UnimplementedFullNodeServer must be embedded to have forward compatible implementations.
type UnimplementedFullNodeServer struct {
}

func (UnimplementedFullNodeServer) GetBlocks(context.Context, *GetBlocksRequest) (*GetBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (UnimplementedFullNodeServer) AppendBlocks(context.Context, *AppendBlocksRequest) (*AppendBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendBlocks not implemented")
}
func (UnimplementedFullNodeServer) GetLastBlock(context.Context, *GetLastBlockRequest) (*GetLastBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastBlock not implemented")
}
func (UnimplementedFullNodeServer) mustEmbedUnimplementedFullNodeServer() {}

// UnsafeFullNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FullNodeServer will
// result in compilation errors.
type UnsafeFullNodeServer interface {
	mustEmbedUnimplementedFullNodeServer()
}

func RegisterFullNodeServer(s grpc.ServiceRegistrar, srv FullNodeServer) {
	s.RegisterService(&FullNode_ServiceDesc, srv)
}

func _FullNode_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FullNodeServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fullnode.FullNode/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FullNodeServer).GetBlocks(ctx, req.(*GetBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FullNode_AppendBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FullNodeServer).AppendBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fullnode.FullNode/AppendBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FullNodeServer).AppendBlocks(ctx, req.(*AppendBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FullNode_GetLastBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FullNodeServer).GetLastBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fullnode.FullNode/GetLastBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FullNodeServer).GetLastBlock(ctx, req.(*GetLastBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FullNode_ServiceDesc is the grpc.ServiceDesc for FullNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FullNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fullnode.FullNode",
	HandlerType: (*FullNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlocks",
			Handler:    _FullNode_GetBlocks_Handler,
		},
		{
			MethodName: "AppendBlocks",
			Handler:    _FullNode_AppendBlocks_Handler,
		},
		{
			MethodName: "GetLastBlock",
			Handler:    _FullNode_GetLastBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fullnode/proto/fullnode.proto",
}
